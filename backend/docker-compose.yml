version: '3.8'
# matthew160619/is213-cloudpantry

services:
  inventory:
    container_name: inventory
    build:
      context: ./Inventory
      dockerfile: Dockerfile
    image: matthew160619/is213-cloudpantry:inventory
    environment:
      - TABLE_NAME=Inventory
      - SUPABASE_API_KEY=${SUPABASE_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
    ports:
      - "${INVENTORY_PORT}:5000"

  excess_inventory:
    container_name: excess-inventory
    # Use depends_on because it reuses the image created when building the inventory microservice
    depends_on:
      - inventory
    image: matthew160619/is213-cloudpantry:inventory
    environment:
      - TABLE_NAME=Excess_Inventory
      - SUPABASE_API_KEY=${SUPABASE_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
    ports:
      - "${EXCESS_INVENTORY_PORT}:5000"

  notification:
    container_name: notification
    build:
      context: ./Notification
      dockerfile: Dockerfile
    image: matthew160619/is213-cloudpantry:notification
    environment:
      - TABLE_NAME=Notification
      - SUPABASE_API_KEY=${SUPABASE_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
    ports:
      - "${NOTIFICATION_PORT}:5000"

  route-optimizer:
    container_name: route-optimizer
    build:
      context: ./route
      dockerfile: Dockerfile
    image: matthew160619/is213-cloudpantry:route-optimizer
    environment:
      - ONEMAP_EMAIL=${ONEMAP_EMAIL}
      - ONEMAP_PASSWORD=${ONEMAP_PASSWORD}
      - OPENCAGE_API=${OPENCAGE_API}
    ports:
      - "${ONEMAP_PORT}:5003"
    networks:
      - route
    dns:
      - 8.8.8.8
      - 1.1.1.1

  resource-allocation-service:
    container_name: resource-allocation-service
    build: ./resource_allocation
    image: matthew160619/is213-cloudpantry:resource-allocation-service
    # network_mode: "host"  # Use the host network
    environment:
      - INVENTORY_ENDPOINT=http://host.docker.internal:${INVENTORY_PORT}/inventory/
      - EXCESS_INVENTORY_ENDPOINT=http://host.docker.internal:${EXCESS_INVENTORY_PORT}/inventory/
      - ROUTE_ENDPOINT=http://host.docker.internal:${ONEMAP_PORT}/route_from_recipients
      - CHARITY_RECIPIENT_ENDPOINT=https://personal-d4txim0d.outsystemscloud.com/Recipient/rest/RecipientAPI/GetRecipientByCharityID?CharityID=
    restart: unless-stopped
    ports:
      - "${RESOURCE_ALLOCATION_PORT}:8000"

  charitymq:
    image: rabbitmq:3-management
    container_name: charitymq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 3s
      retries: 10
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - charity_network

  amqp-setup:
    build:
      context: ./rabbitmq
      dockerfile: Dockerfile
    container_name: amqp-setup
    depends_on:
      # rabbitmq start b4 the notification listener
      charitymq:
        condition: service_healthy
    environment:
      - CHARITY_ENDPOINT=https://personal-d4txim0d.outsystemscloud.com/Charity/rest/CharityAPI
      - RABBITMQ_HOST=charitymq
      - RABBITMQ_USER=admin
      - RABBITMQ_PASS=password
    networks:
      - charity_network
      - route
    restart: on-failure

  request_api:
    container_name: request-api
    build:
      context: ./request_api
      dockerfile: Dockerfile
    image: matthew160619/is213-cloudpantry:request-api
    ports:
      - "${REQUEST_API_PORT:-5101}:5101"
    environment:
      - MESSAGENF_DB_URL=${MESSAGENF_DB_URL}
      - MESSAGENF_DB_KEY=${MESSAGENF_DB_KEY}
      - RABBITMQ_HOST=charitymq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=guest
      - RABBITMQ_PASS=guest
      - INVENTORY_ENDPOINT=http://inventory:5000/inventory/
      - EXCESS_INVENTORY_ENDPOINT=http://excess-inventory:5000/inventory/
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Give access to Docker socket
    networks:
      - charity_network
    depends_on:
      charitymq:
        condition: service_healthy
      amqp_setup:
        condition: service_completed_successfully
    restart: unless-stopped



  # For route-optimiser microservice
networks:
  route:
    driver: bridge
  # For rabbitMQ microservice
  charity_network:
    driver: bridge

volumes:
  rabbitmq_data: